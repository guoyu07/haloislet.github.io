<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>岛</title>
  
  <subtitle>一杯敬朝阳，一杯敬月光</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://haloislet.github.io/"/>
  <updated>2018-02-26T00:00:00.000Z</updated>
  <id>https://haloislet.github.io/</id>
  
  <author>
    <name>halo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>理性分析 JavaScript 中的 this</title>
    <link href="https://haloislet.github.io/2018/02/26/this/"/>
    <id>https://haloislet.github.io/2018/02/26/this/</id>
    <published>2018-02-26T00:00:00.000Z</published>
    <updated>2018-02-26T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在每一个方法中，关键字 this 表示隐式参数。<br>—— 《Java 核心技术 卷Ⅰ》</p></blockquote><a id="more"></a><p><br></p><h2 id="this-是什么？"><a href="#this-是什么？" class="headerlink" title="this 是什么？"></a>this 是什么？</h2><hr><p>了解 python 的同学可能会知道，python 构造函数中总是会出现 self 参数。这个参数用来表示创建的实例对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br></pre></td></tr></table></figure><p>在 JavaScript 和 Java 中这个参数被隐藏了。我们不必在参数列表中显式声明这个参数，就可以在函数中使用这个参数。这个参数就是 this 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, score</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name</span><br><span class="line"><span class="keyword">this</span>.score = score</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> studentA = <span class="keyword">new</span> Student(<span class="string">'a'</span>, <span class="number">100</span>)</span><br><span class="line"><span class="built_in">console</span>.log(studentA.name, studentA.score) <span class="comment">// a 100</span></span><br></pre></td></tr></table></figure><h3 id="隐式参数"><a href="#隐式参数" class="headerlink" title="隐式参数"></a>隐式参数</h3><p>援引 《Java 核心技术 卷Ⅰ》 中的一句话：在每一个方法中，关键字 this 表示隐式参数。 所谓的隐式参数，就是没有在参数列表中显式声明的参数。隐式参数和参数列表中定义的显式参数统称为形式参数。与形式参数相对应的是实际参数。</p><h3 id="形式参数和实际参数"><a href="#形式参数和实际参数" class="headerlink" title="形式参数和实际参数"></a>形式参数和实际参数</h3><p>形式参数，简称形参。形参就是在定义函数的时候使用的参数，用来接收调用该函数时传递的参数。如上述代码中的 name ，score 参数都是形参。</p><p>实际参数，简称实参，实参就是调用该函数时传递的参数。如上述代码中的 ‘a’ ， 100 都是实参。</p><h3 id="为什么-this-的值是在调用时确定的？"><a href="#为什么-this-的值是在调用时确定的？" class="headerlink" title="为什么 this 的值是在调用时确定的？"></a>为什么 this 的值是在调用时确定的？</h3><p>《 你不知道的JavaScript（上卷）》中提了一个问题，问：为什么采用词法作用域的 JavaScript 中的 this 的值是在调用时确定的？</p><p>在理解了形参和实参之后，我们便能很好地理解这个问题了。</p><p>因为 this 是一个形参，形参的值是由实参决定的。而传参这个操作时在调用时发生的，所以 this 的值是在调用时确定的。</p><p><br></p><h2 id="this-的值"><a href="#this-的值" class="headerlink" title="this 的值"></a>this 的值</h2><hr><p>既然 this 的值是由实参的值决定的，那么这个实参的值到底是什么呢？</p><p>参考 《Java 核心技术 卷Ⅰ》 中的一句话：隐式参数的值是出现在函数名之前的对象。当作为构造函数时，this 用来表示创建的实例对象。来看两个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  name: <span class="string">'foo'</span>,</span><br><span class="line">  bar: bar</span><br><span class="line">&#125;</span><br><span class="line">foo.bar() <span class="comment">// foo</span></span><br></pre></td></tr></table></figure></p><p>this 指向函数名（bar）之前的 foo 对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, score</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name</span><br><span class="line"><span class="keyword">this</span>.score = score</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> studentA = <span class="keyword">new</span> Student(<span class="string">'a'</span>, <span class="number">100</span>)</span><br><span class="line"><span class="built_in">console</span>.log(studentA.name, studentA.score) <span class="comment">// a 100</span></span><br></pre></td></tr></table></figure><p>this 指向创建的实例对象 studentA </p><h3 id="call-apply-bind"><a href="#call-apply-bind" class="headerlink" title="call apply bind"></a>call apply bind</h3><p>JavaScript 也提供了几个函数去改变 this 的值。这几个函数都会返回一个原函数的拷贝，并在这个拷贝上传递 this 的值。所以从结果上看，我们可以看到原有的 this 会被覆盖。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  name: <span class="string">'foo'</span>,</span><br><span class="line">  bar: bar</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'obj'</span>,</span><br><span class="line">&#125;</span><br><span class="line">foo.bar.call(obj) <span class="comment">// obj</span></span><br></pre></td></tr></table></figure><p>this 指向新的对象 obj 。</p><h3 id="为什么-this-指向了全局对象？"><a href="#为什么-this-指向了全局对象？" class="headerlink" title="为什么 this 指向了全局对象？"></a>为什么 this 指向了全局对象？</h3><p>《 你不知道的JavaScript（上卷）》中描述了一种现象：this 丢失了原来的绑定对象，指向了全局对象。书中称为隐式丢失。来看示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"><span class="built_in">console</span>.log( <span class="keyword">this</span>.a )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123; </span><br><span class="line">a: <span class="number">2</span>,</span><br><span class="line">foo: foo </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bar = obj.foo <span class="comment">// 赋值操作</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">"oops, global"</span> </span><br><span class="line">bar() <span class="comment">// "oops, global"</span></span><br></pre></td></tr></table></figure></p><p>JavaScript 只有值传递，没有引用传递。在赋值操作的时候，其实是将一个引用的拷贝赋值给另外一个变量。<code>var bar = obj.foo</code> 在这个语句中，没有传参操作，所以 this 的值是由 bar 函数在调用时传递的那个实参决定的。这个实参如未显式指定，那么便是指向全局对象。所以上述代码中的 this 指向了全局对象。</p><p>同样的，我们在函数传参的过程中，经常发现隐式丢失问题，原因也是中间发生了一次赋值操作。代码示例如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'global'</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  name: <span class="string">'foo'</span>,</span><br><span class="line">  bar: bar</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callFunc</span>(<span class="params">func</span>)</span>&#123;</span><br><span class="line">  func()</span><br><span class="line">&#125;</span><br><span class="line">callFunc(foo.bar) <span class="comment">// global</span></span><br></pre></td></tr></table></figure></p><p>在传参的过程中，发生了<code>func = foo.bar</code>的赋值操作，导致最后 this 的值指向了全局对象。</p><p>但是如果我们使用 bind 绑定了 this 的值，那么在发生赋值操作时，this 的值将不再改变。来看下面例子。</p><h3 id="再谈-bind"><a href="#再谈-bind" class="headerlink" title="再谈 bind"></a>再谈 bind</h3><p>bind 和 call ，apply 有一点不同的是  call，apply 返回的是调用结果，而 bind 返回的是绑定 this 后的函数对象。那么当绑定 this 后的函数作为实参传入函数时，与未绑定 this 的结果就完全不同了。</p><p>来看下面的例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'global'</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  name: <span class="string">'foo'</span>,</span><br><span class="line">  bar: bar</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callFunc</span>(<span class="params">func</span>)</span>&#123;</span><br><span class="line">  func()</span><br><span class="line">&#125;</span><br><span class="line">callFunc(foo.bar.bind(foo)) <span class="comment">// foo</span></span><br></pre></td></tr></table></figure><p>将 bar 函数中的 this 绑定到 foo 再传入 callFunc 函数中，最后打印的结果是 foo 。</p><p>实际上， bind 函数内部维护了一个闭包，使得调用始终发生在函数内部，来保证 this 的值不变。来看 MDN 提供的 ployfill<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">if (!Function.prototype.bind) &#123;</span><br><span class="line">  Function.prototype.bind = function(oThis) &#123;</span><br><span class="line">    if (typeof this !== &apos;function&apos;) &#123;</span><br><span class="line">      // closest thing possible to the ECMAScript 5</span><br><span class="line">      // internal IsCallable function</span><br><span class="line">      throw new TypeError(&apos;Function.prototype.bind - what is trying to be bound is not callable&apos;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var aArgs   = Array.prototype.slice.call(arguments, 1),</span><br><span class="line">        fToBind = this,</span><br><span class="line">        fNOP    = function() &#123;&#125;,</span><br><span class="line">        fBound  = function() &#123;</span><br><span class="line">          return fToBind.apply(this instanceof fNOP</span><br><span class="line">                 ? this</span><br><span class="line">                 : oThis,</span><br><span class="line">                 aArgs.concat(Array.prototype.slice.call(arguments)))</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    if (this.prototype) &#123;</span><br><span class="line">      // Function.prototype doesn&apos;t have a prototype property</span><br><span class="line">      fNOP.prototype = this.prototype</span><br><span class="line">    &#125;</span><br><span class="line">    fBound.prototype = new fNOP()</span><br><span class="line"></span><br><span class="line">    return fBound</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// return 部分</span><br><span class="line"> return fToBind.apply(this instanceof fNOP</span><br><span class="line">                 ? this</span><br><span class="line">                 : oThis,</span><br><span class="line">                 aArgs.concat(Array.prototype.slice.call(arguments)))</span><br></pre></td></tr></table></figure><p>在 return 的时候使用了 apply 函数来改变 this ，若未发生 new 操作，那么这个 this 的值将绑定到 bind 函数提供的那个对象。</p><h3 id="new-操作"><a href="#new-操作" class="headerlink" title="new 操作"></a>new 操作</h3><p>当发生 new 操作时，this 将绑定到这个实例对象。<br>从上面这个 ploy fill 可以看出 new 操作中的 this 值会覆盖原有 this 的值。来看例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function bar () &#123;</span><br><span class="line">  this.name = &apos;bar&apos;</span><br><span class="line">&#125;</span><br><span class="line">var foo = &#123;</span><br><span class="line">  name: &apos;foo&apos;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var a = bar.bind(foo)</span><br><span class="line">a()</span><br><span class="line">console.log(foo.name) // bar</span><br><span class="line">var b = new a()</span><br><span class="line">console.log(b.name) // bar</span><br></pre></td></tr></table></figure><p>当执行 new 操作之前，a 函数中的 this 指向 foo。当执行 new 操作之后，a 函数中的 this 指向了 b 。</p><p>new 操作会返回一个重新绑定 this 后的新对象。所以当发生 new 操作之后，原有的 this 发生了改变。具体步骤如下：</p><ol><li>创建（或者说构造）一个全新的对象。</li><li>这个新对象会被执行 [[ 原型 ]] 连接。</li><li>这个新对象会绑定到函数调用的 this 。</li><li>如果函数没有返回其他对象，那么 new 表达式中的函数调用会自动返回这个新对象。</li></ol><h3 id="箭头函数中的-this"><a href="#箭头函数中的-this" class="headerlink" title="箭头函数中的 this"></a>箭头函数中的 this</h3><p>箭头函数中的 this 继承了父作用域的 this。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'global'</span></span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  name: <span class="string">'foo'</span>,</span><br><span class="line">  bar: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo.bar() <span class="comment">// global</span></span><br></pre></td></tr></table></figure><p>箭头函数的父作用域为全局作用域，全局作用域的 this 指向全局对象，所以 this 指向了全局对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'global'</span></span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  name: <span class="string">'foo'</span>,</span><br><span class="line">  bar: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;,<span class="number">100</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo.bar() <span class="comment">// foo</span></span><br></pre></td></tr></table></figure><p>箭头函数的父作用域为 bar 函数，在调用时，父作用域 bar 函数中的 this 指向了 foo 函数，所以箭头函数中的 this 指向了 foo 。</p><h3 id="严格模式下的-this"><a href="#严格模式下的-this" class="headerlink" title="严格模式下的 this"></a>严格模式下的 this</h3><p>严格模式下禁止 this 指向全局对象。在严格模式下当 this 指向全局对象的时候会变成 undefined 。</p><p><br></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><hr><ol><li>this 指向创建的实例对象或函数名之前的对象。如未指定，便是指向全局对象。</li><li>由于 call 、apply 、bind 函数会返回一个原函数的拷贝，并在这个拷贝上传递 this 值。所以当使用 call 、apply 、bind 函数会覆盖原有的 this 值。</li><li>new 操作可以覆盖 call、apply、bind 绑定的 this 值。</li></ol><h3 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h3><ul><li>严格模式下禁止 this 指向全局对象。在严格模式下当 this 指向全局对象的时候会变成 undefined 。</li><li>在发生赋值操作时，由于引用复制， this 的值指向被赋值变量的调用对象。</li><li>ES 6 中新增箭头函数，可以继承父作用域的 this ，可以解决 this 隐式丢失的问题。</li></ul><h3 id="相关知识点"><a href="#相关知识点" class="headerlink" title="相关知识点"></a>相关知识点</h3><ul><li>词法作用域和动态作用域</li><li>闭包</li><li>作用域和作用域链</li><li>严格模式</li><li>ES6 新增特性</li><li>引用传递和值传递</li></ul><hr><p>欢迎交流指正</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在每一个方法中，关键字 this 表示隐式参数。&lt;br&gt;—— 《Java 核心技术 卷Ⅰ》&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="理性分析 JavaScript" scheme="https://haloislet.github.io/categories/%E7%90%86%E6%80%A7%E5%88%86%E6%9E%90-JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://haloislet.github.io/tags/JavaScript/"/>
    
  </entry>
  
</feed>
